import os
import torch
import numpy as np
from PIL import Image
from facenet_pytorch import InceptionResnetV1, MTCNN

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
mtcnn = MTCNN(image_size=160, device=device)
resnet = InceptionResnetV1(pretrained='vggface2').eval().to(device)

data_path = '23-Arid-1234'
embedding_dir = 'Embedding'
os.makedirs(embedding_dir, exist_ok=True)

for student in os.listdir(data_path):
    student_img_path = os.path.join(data_path, student)
    if not os.path.isdir(student_img_path):
        continue

    embeddings = []

    for img_name in os.listdir(student_img_path):
        img_path = os.path.join(student_img_path, img_name)
        img = Image.open(img_path).convert('RGB')
        face = mtcnn(img)

        if face is not None:
            with torch.no_grad():
                emb = resnet(face.unsqueeze(0).to(device)).cpu().numpy()
                embeddings.append(emb[0])

    if embeddings:
        embeddings = np.array(embeddings)
        avg_embedding = np.mean(embeddings, axis=0)
        np.save(os.path.join(embedding_dir, f"{student}.npy"), avg_embedding)
        print(f"âœ… Saved embedding for {student}")
